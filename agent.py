# Import necessary libraries
import streamlit as st
from phi.agent import Agent
from phi.model.openai import OpenAIChat
from phi.model.groq import Groq
from phi.tools.duckduckgo import DuckDuckGo
from dotenv import load_dotenv
from reportlab.pdfgen import canvas
from io import BytesIO
from phi.tools.exa import ExaTools
import tempfile
import os

def create_pdf(travelplan):
    """
    Read a PDF file and return its content as a string.

    travelplan: Travel plan generated by the agent
    """
    # Create a BytesIO buffer for the PDF
    buffer = BytesIO()
    pdf = canvas.Canvas(buffer)

    # Add a UTF-8 compatible font (e.g., DejaVuSans)
    pdf.setFont("Helvetica", size=12)
    x,y = 50, 800
    for line in travelplan.split("\n"):
        pdf.drawString(x, y, line)
        y -= 15
        if y<50:
            pdf.showPage()
            y = 800
    pdf.save()
    buffer.seek(0)
    return buffer
    
        
# Streamlit app layout
def main():
    """
    Main function for the Streamlit app.
    """
    st.set_page_config(
        page_title="AI Travel Planner",
        page_icon="üåç", 
        layout="wide",
        initial_sidebar_state="expanded")
    
    # Enhanced Custom CSS for improved UI
    st.markdown("""
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="AI Travel Planner: Plan your dream trips effortlessly with AI-driven recommendations and itineraries tailored to your preferences.">
    <meta name="keywords" content="Travel, AI Planner, Vacation, Itinerary, Budget Travel, Luxury Travel">
    <meta name="author" content="TripPlanAI">
    <meta name="theme-color" content="#1E1E2F"> <!-- Matches the dark theme background -->         
    """, unsafe_allow_html=True)
    st.markdown("""
    <style>
    :root {
        --primary-color: #1ABC9C; /* Teal accent for primary elements */
        --accent-color: #E74C3C; /* Red accent for secondary elements */
        --background-dark: #1C1C1E; /* Dark background */
        --background-light-dark: #2C2C2E; /* Slightly lighter dark for sections */
        --text-color: #ECF0F1; /* Light text color */
        --hover-shadow: 0 4px 12px rgba(0, 0, 0, 0.5);
        --border-color: #3C3C3E;
        --footer-color: #A9A9A9;
    }

    body, .main {
        background-color: var(--background-dark);
        color: var(--text-color);
    }

    h1, h2, h3, h4, h5 {
        color: var(--primary-color);
        font-family: 'Arial', sans-serif;
    }

    .stButton > button {
        width: 100%;
        border-radius: 8px;
        height: 3em;
        background-color: var(--accent-color) !important;
        color: white !important;
        font-weight: bold;
        font-size: 1rem;
        border: none;
        transition: all 0.3s ease;
    }

    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: var(--hover-shadow);
        background-color: #C0392B !important;
    }

    .sidebar .element-container {
        background-color: var(--background-light-dark);
        padding: 1rem;
        border-radius: 10px;
        margin-bottom: 1rem;
        box-shadow: 0 2px 8px rgba(0,0,0,0.3);
        border: 1px solid var(--border-color);
    }

    .stExpander {
        background-color: var(--background-light-dark);
        border-radius: 10px;
        padding: 1rem;
        border: 1px solid var(--border-color);
        box-shadow: 0 2px 8px rgba(0,0,0,0.3);
    }

    .stExpander:hover {
        background-color: #3C3C3E;
    }

    .stExpander > div > label {
        font-size: 1.2rem;
        font-weight: bold;
        color: var(--primary-color);
    }

    .travel-summary {
        background-color: var(--background-light-dark);
        padding: 1.5rem;
        border-radius: 10px;
        margin-bottom: 2rem;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.4);
        border-left: 5px solid var(--primary-color);
    }

    .travel-summary h4 {
        color: var(--primary-color);
        font-weight: bold;
        margin-bottom: 0.5rem;
        font-size: 1.5rem;
    }

    .spinner-text {
        font-size: 1.2rem;
        font-weight: bold;
        color: var(--primary-color);
    }

    .stDownloadButton > button {
        background-color: var(--accent-color) !important;
        border: none;
        color: white !important;
        border-radius: 8px;
        font-size: 1rem;
        height: 3em;
        font-weight: bold;
        transition: all 0.3s ease;
    }

    .stDownloadButton > button:hover {
        background-color: #C0392B !important;
        box-shadow: var(--hover-shadow);
        transform: translateY(-2px);
    }

    footer {
        background-color: var(--background-light-dark);
        padding: 1rem;
        border-radius: 10px;
        margin-top: 2rem;
        text-align: center;
        font-size: 0.9rem;
        color: var(--text-color);
        border: 1px solid var(--border-color);
    }

    code {
        background-color: var(--background-light-dark);
        color: var(--primary-color);
        border-radius: 5px;
        padding: 0.2em 0.4em;
    }

    hr {
        border-color: var(--border-color);
    }
    </style>


    """, unsafe_allow_html=True)

    # Sidebar for input
    with st.sidebar:
        st.image("https://img.icons8.com/fluency/200/sunbathe.png")
        st.title("Trip Settings",)
         # User inputs for API keys
        groq_api_key = st.text_input("üîë Enter your Groq API Key", type="password")

        source = st.text_input("üìç Where are you coming from?")
        destination = st.text_input("üåç Where would you like to go?")
        
        budget = st.select_slider(
        "üí∞ What's your budget level?",
        options=["Budget", "Moderate", "Luxury"],
        value="Moderate"
        )

        travel_style = st.multiselect(
        "üéØ Travel Style",
        ["Culture", "Nature", "Adventure", "Relaxation", "Food", "Shopping"],
        ["Culture", "Nature"]
        )

        num_of_person = st.number_input("üë• How many people?", min_value=1, max_value=10, value=2)


        duration = st.number_input("üìÖ How many days?", min_value=1, max_value=30, value=5)

    # Initialize session state variables
    if 'travel_plan' not in st.session_state:
        st.session_state.travel_plan = None
    if 'qa_expanded' not in st.session_state:
        st.session_state.qa_expanded = False

    # Add loading state container
    loading_container = st.empty()

    try:
        os.environ["GROQ_API_KEY"] = groq_api_key
        
        # Initialize travel agent with Groq Llama model and SerpAPI
        travel_agent = Agent(
            name="Travel Planner",
            model=Groq(id="llama-3.3-70b-versatile"),  # Adjust if necessary based on actual import
            tools=[DuckDuckGo(), ExaTools()],
            instructions=[
                "You are a travel planning assistant",
                "Help users plan their trips by researching destinations, finding attractions, suggesting accommodations, and providing transportation options.",
                "Use Exa to search and extract relevant data from reputable travel platforms.",
                "Give me relevant live Links of each places and hotels you provide by searching on internet (It's important)",
                "Always verify information is current before making recommendations.",
                "Ensure that the gathered data is accurate and tailored to the user's preferences, such as destination, group size, and budget constraints.",
                "Collect information on flights, accommodations, local attractions, and estimated costs from these sources.",
                "Create a clear and concise itinerary that includes: detailed day-by-day travel plan, suggested transportation and accommodation options, activity recommendations (e.g., sightseeing, dining, events), an estimated cost breakdown (covering transportation, accommodation, food, and activities).",
                "If a particular website or travel option is unavailable, provide alternatives from other trusted sources.",
            ],
            show_tool_calls=False,
            markdown=True,
        )

        # set API keys in enviornment variables
        # Main UI
        st.markdown("""
                    <style>
                    /* Header Styling */
                    .header h1, .header h2 {
                        text-align: center;
                        margin: var(--spacing) auto;
                        text-transform: uppercase;
                        font-weight: bold;
                        text-shadow: var(--header-shadow);
                    }

                    .header h1 {
                        text-align: center;
                        font-size: 2.5rem; /* Adjust based on design */
                        color: #1ABC9C; /* Vibrant teal for the main header */
                        font-weight: bold;
                        text-transform: uppercase; /* Optional for emphasis */
                        margin-bottom: 0.2rem;
                    }

                    .header h2 {
                        text-align: center;
                        font-size: 1.5rem;
                        color: #E67E22 ; /* Light, neutral secondary color to complement teal */
                        font-style: italic; /* Optional for a subtle contrast */
                        margin-top: -0.5rem; /* Adjust for spacing harmony */
                    }
                    
                    """, unsafe_allow_html=True)
        
        st.markdown(f"""
        <div class="header">
        <h1>üåé AI Travel Planner</h1>
        <h2>Plan your dream trip in minutes!</h2>
        </div>
        """, unsafe_allow_html=True)
       
        st.markdown(f"""
        <div class="travel-summary">
            <h4>Welcome to your personal AI Travel Assistant! üåü</h4>
            <p>Let me help you create your perfect travel itinerary based on your preferences.</p>
            <p><strong>Origin:</strong> {source}</p>
            <p><strong>Destination:</strong> {destination}</p>
            <p><strong>Duration:</strong> {duration} days</p>
            <p><strong>Number of People:</strong> {num_of_person}</p>
            <p><strong>Budget:</strong> {budget}</p>
            <p><strong>Travel Styles:</strong> {', '.join(travel_style)}</p>
        </div>
        """, unsafe_allow_html=True)
         # Generate button
        if st.button("‚ú® Generate My Perfect Travel Plan", type="primary"):
            if destination:
                try:
                    with st.spinner("üîç Researching and planning your trip..."):
                        prompt = f"""Create a comprehensive travel plan for {source} to {destination} for {duration} days for {num_of_person} people.
                                Travel Preferences:
                                - Budget Level: {budget}
                                - Travel Styles: {', '.join(travel_style)}

                                Please provide a detailed itinerary that includes:

                                1. üåû Best Time to Visit
                                - Seasonal highlights
                                - Weather considerations

                                2. üè® Accommodation Recommendations
                                - {budget} range hotels/stays
                                - Locations and proximity to attractions

                                3. üó∫Ô∏è Day-by-Day Itinerary
                                - Must-visit attractions
                                - Local experiences aligned with travel styles

                                4. üçΩÔ∏è Culinary Experiences
                                - Local cuisine highlights
                                - Recommended restaurants
                                - Food experiences matching travel style

                                5. üí° Practical Travel Tips
                                - Local transportation options
                                - Cultural etiquette
                                - Safety recommendations
                                - Estimated daily budget breakdown

                                6. üí∞ Estimated Total Trip Cost
                                - Breakdown of expenses
                                - Money-saving tips
                                Format the response in a clear, easy-to-read markdown format with headings and bullet points.
                                """
                        response = travel_agent.run(prompt)
                        if hasattr(response, 'content'):
                            clean_response = response.content.replace('‚à£', '|').replace('\n\n\n', '\n\n')
                            st.session_state.travel_plan = clean_response
                            st.markdown(clean_response)
                        else:
                            st.session_state.travel_plan = str(response)
                            st.markdown(str(response))
                except Exception as e:
                    st.error(f"Application Error: {str(e)}")
        
        # Save button
        #if st.session_state.travel_plan:
        #    pdf_buffer = create_pdf(st.session_state.travel_plan)
        #    try:
        #        st.download_button(
        #            label="Download PDF",
        #            data=pdf_buffer,
        #            file_name="travel_plan.pdf",
        #            mime="application/pdf",
        #           type="primary"
        #        )
        #    except Exception as e:
        #        st.error(f"Application Error: {str(e)}")
        # Q&A Section
        

        st.divider()
    
        # Use st.expander with a key to maintain state
        qa_expander = st.expander("ü§î Ask a specific question about your destination or travel plan", expanded=st.session_state.qa_expanded)

        with qa_expander:
            question = st.text_input("Ask a question about your trip:")
            if st.button("Get Answer", key = "qa_button"):
                # Question is added
                if question and st.session_state.travel_plan:
                    
                    with st.spinner("üîé Searching for answers..."):
                        try:
                            # create prompt template
                            que_with_context = f"""
                            I have a travel plan for {destination}. Here is the exisiting plan:
                            {st.session_state.travel_plan}

                            Now please answer this specific question : {question}

                            Provide a focused , concise answer that relates to exisitiing travel plan
                            if possible.
                           ."""
                            
                            # generate response
                            response = travel_agent.run(que_with_context)
                            if hasattr(response, 'content'):
                                st.markdown(response.content)
                            else:
                                st.markdown(str(response))

                        except Exception as e:
                            st.error(f"Error getting answer. Please retry again.Sorry for Incovience: {str(e)}")
                elif not st.session_state.travel_plan:
                    st.error("Please generate a travel plan first before asking question")
                else:
                    st.error("Please enter a question.")
    except Exception as e:
        st.error(f"Application Error: {str(e)}")
    
    # Footer
    # Footer
    with st.container():
        st.markdown("""
        <hr style="border: none; height: 2px; background-color: var(--accent-color); margin: 20px 0;">
        <div style="text-align: center; padding: 20px; color: var(--text-color);">
            <h3 style="color: var(--primary-color); font-size: 1.5rem; margin-bottom: 10px;">üìç About This App</h3>
            <p style="font-size: 1rem; line-height: 1.6;">
                This travel planning assistant uses advanced AI to help you create personalized travel plans effortlessly. 
                Powered by <strong>LLM</strong> and <strong>Various Tools</strong> for the most accurate recommendations 
                and real-time information.
            </p>
            <p style="font-size: 1rem; line-height: 1.6;">
                Whether you're planning a budget-friendly adventure or a luxury getaway, we've got you covered. üåç‚ú®
            </p>
            <p style="margin-top: 15px; font-size: 0.9rem; color: var(--footer-color);">
                ¬© 2025 <strong>AI Travel Planner</strong> - All Rights Reserved. | Proudly Created by Raj Dalsaniya
            </p>
            <div style="margin-top: 10px;">
                <a href="https://twitter.com" target="_blank" style="margin-right: 10px;">
                    <img src="https://img.icons8.com/fluency/48/twitter.png" alt="Twitter" style="width: 32px;">
                </a>
                <a href="https://facebook.com" target="_blank" style="margin-right: 10px;">
                    <img src="https://img.icons8.com/fluency/48/facebook-new.png" alt="Facebook" style="width: 32px;">
                </a>
                <a href="https://linkedin.com" target="_blank">
                    <img src="https://img.icons8.com/fluency/48/linkedin.png" alt="LinkedIn" style="width: 32px;">
                </a> 
                <a href="https://linkedin.com" target="_blank">
                    <img src="https://img.icons8.com/fluency/48/github.png" alt="Github" style="width: 32px;">
                </a>      
            </div>
        </div>
        """, unsafe_allow_html=True)


# Run the app
if __name__ == "__main__":
    main()
